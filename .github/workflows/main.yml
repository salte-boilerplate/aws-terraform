name: 'Main'
on:
  - push
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_STATE_BUCKET: ${{ secrets.TERRAFORM_STATE_BUCKET }}
  TERRAFORM_STATE_KMS_KEY_ID: ${{ secrets.TERRAFORM_STATE_KMS_KEY_ID }}
  TF_VAR_private_vpc_name: ${{ secrets.private_vpc_name }}
  TF_VAR_public_vpc_name: ${{ secrets.public_vpc_name }}
jobs:
  initialize:
    name: 'Initialize Derived Variables'
    runs-on: ubuntu-latest
    outputs:
      deployable: ${{ steps.default.outputs.deployable }}
      git_branch: ${{ steps.default.outputs.git_branch }}
      git_commit_short_sha: ${{ steps.default.outputs.git_commit_short_sha }}
      git_repository: ${{ steps.default.outputs.git_repository }}
    steps:
      - id: default
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "BRANCH: $BRANCH"
          if [[ $BRANCH == *"/"* ]]; then
            echo ::set-output name=deployable::$(echo false)
            echo ::set-output name=git_branch::$(echo default)
          else
            echo ::set-output name=deployable::$(echo true)
            echo ::set-output name=git_branch::$(echo ${BRANCH})
          fi
          echo ::set-output name=git_commit_short_sha::$(echo ${GITHUB_SHA:0:8})
          echo ::set-output name=git_repository::$(echo ${GITHUB_REPOSITORY//\//-})
  terraform:
    name: 'Run Terraform Actions'
    runs-on: ubuntu-latest
    needs: initialize
    defaults:
      run:
        working-directory: src
    env:
      TF_VAR_GIT_COMMIT_SHORT_SHA: ${{ needs.initialize.outputs.git_commit_short_sha }}
      TF_VAR_GIT_REPOSITORY: ${{ needs.initialize.outputs.git_repository }}
    steps:
      - name: 'Checkout Source Code'
        uses: actions/checkout@v2
      - name: 'Install Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Validate Terraform Formatting'
        run: terraform fmt -check
      - if: ${{ needs.initialize.outputs.deployable == 'false' }}
        name: 'Initialize Terraform Project w/o Backend'
        run: terraform init -input=false -backend=false
      - if: ${{ needs.initialize.outputs.deployable == 'true' }}
        name: 'Initialize Terraform Project w/ Backend'
        run: terraform init -input=false -backend-config="bucket=${TERRAFORM_STATE_BUCKET}" -backend-config="key=${{ needs.initialize.outputs.git_repository }}" -backend-config="encrypt=true" -backend-config="kms_key_id=${TERRAFORM_STATE_KMS_KEY_ID}"
      - name: 'Validate'
        run: terraform validate
      - name: 'Create Terraform Project Deployment Plan'
        run: |
          terraform workspace select ${{ needs.initialize.outputs.git_branch }} 2>/dev/null || terraform workspace new ${{ needs.initialize.outputs.git_branch }}
          terraform plan -input=false -out=terraform.plan
      - if: ${{ needs.initialize.outputs.deployable == 'true' }}
        name: 'Execute Terraform Project Deployment Plan'
        run: |
          terraform workspace select ${{ needs.initialize.outputs.git_branch }}
          terraform apply -input=false terraform.plan
